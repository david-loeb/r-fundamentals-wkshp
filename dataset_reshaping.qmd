---
title: "Reshape Datasets with `pivot_longer()` & `pivot_wider()`"
author: "David Loeb"
format: html
---

# Overview

- Reshaping data is a very common need in data analysis
- **Reshape** means to restructure the setup of the rows and columns in a dataset, making the dataset either *longer* or *wider*
- Datasets can be in two different formats: long or wide
  - **Long** datasets have all of the data stored in cells, with each column being a truly unique non-overlapping category of data
  - **Wide** datasets store some data in their column names
- Below is an example of the same underlying dataset, structured in wide and long format

```{r}
# Wide dataset
df_wide <- data.frame(
  player = c("Messi", "Ronaldo", "Salah", "Aaronson"),
  goals_game1 = c(2, 1, 3, 1),
  goals_game2 = c(1, 2, 2, 0),
  goals_game3 = c(1, 0, 2, 2)
)

# Long dataset
df_long <- data.frame(
  player = c(
    "Messi", "Messi", "Messi", "Ronaldo", "Ronaldo", "Ronaldo",
    "Salah", "Salah", "Salah", "Aaronson", "Aaronson", "Aaronson"
  ),
  game = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3),
  goals = c(2, 1, 1, 1, 2, 0, 3, 2, 2, 1, 0, 2)
)

df_wide
df_long
```

- You can see how they get their names: wide datasets have more columns and long datasets have more rows
- Reshaping just means making a dataset longer or wider
- The best way to do this in R is to use the `pivot_longer()` and `pivot_wider()` functions from the `tidyr` package (which is a core part of the `tidyverse` packages)

# Long Reshaping Basics

- Long reshaping takes data stored in the names of column headers and creates a column for them, with the data now being stored in cells in that column
- In the example above, in the wide dataset, the "game1", "game2" and "game3" parts of the column names are data
  - Reshaping this dataset to long means creating a column called "game" and then storing the game number in cells within this column
- For data analysis & visualization, it is typically best to have your data in long format

## `pivot_longer()`

- `pivot_longer()` is the `tidyr` function that reshapes a wide dataset to long
- Syntax: `pivot_longer(data = df, cols = -player, names_to = "game", values_to = "goals")`
- Argument 1 is the name of dataframe, as always in a tidyverse function
- `cols =` arg is where you specify the columns you want to reshape to long
  - You select these the same way you would inside a `select()` function
  - Typically it's easiest to specify the columns you dont want to reshape, rather than type out all the ones you do, which is what i did in the example syntax
  - Another approach would be to use a `select()` helper function to specify the columns you want to choose, eg: `cols = contains("game")`
- `names_to =` arg is the name of the new column where the data stored in the wide dataset column name will go
- `values_to =` arg is the name of the new column where the data stored in regular data cells in the wide dataset will go

```{r}
df <- data.frame(
  player = c("Messi", "Ronaldo", "Salah", "Aaronson"),
  goals_game1 = c(2, 1, 3, 1),
  goals_game2 = c(1, 2, 2, 0),
  goals_game3 = c(1, 0, 2, 2)
)

df

pacman::p_load(tidyr)

df <- pivot_longer(
  df,
  -player,
  names_to = "game",
  values_to = "goals"
)

df
```

- You can then further clean the data if you want the data in the `games` column to just be numbers, using `mutate` and recoding functions

# Wide Reshaping Basics

- Wide reshaping takes some of the data stored in cells and creates new columns with that data in the name
- Though long data is typically best, wide data can have advantages in certain situations:
  - Wide data is often easier to look at in table format (which this example demonstrates) 
  - You might want to do a series of joins where joining datasets in wide format is the best approach, and then reshape it to long after all the joins are complete (I do this a lot)
- Also note that there are varying levels to which a dataset can be wide
  - Technically the widest possible dataset would just be a single row, which never happens obviously
  - So it's all really on a spectrum

## `pivot_wider()`

- `pivot_wider()` is the `tidyr` function for reshaping data wider
- Syntax: `pivot_wider(data = df, names_from = game, values_from = goals)`
- First arg is dataframe
- `names_from =` is the name of the column that contains the data that will become the names of the new columns in the wide dataset (a bit confusing in words...makes more sense when you see it)
- `values_from =` is the name of the column that contains the values that will be the regular data in the cells of the newly created columns

```{r}
df

df <- pivot_wider(
  df,
  names_from = game,
  values_from = goals
)

df
```









